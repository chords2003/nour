# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'Nour Production Variables'
  - name: phpVersion
    value: '8.3' # Replace with your desired PHP version

steps:
- script: |
    sudo add-apt-repository ppa:ondrej/php -y
    sudo apt-get update
    sudo apt-get install php$(phpVersion) php$(phpVersion)-common php$(phpVersion)-mysql -y
    php -v
  displayName: 'Install and check PHP version'

- script: |
    sudo apt-get install php$(phpVersion)-xml -y
  displayName: 'Install PHP XML extension'
  
- script: |
    php -m
  displayName: 'List PHP modules'

- script: |
    sudo apt-get update
    sudo apt-get install -y unixodbc-dev gcc g++ make autoconf libc-dev pkg-config
    sudo apt-get install pdo_sqlsrv
    sudo apt-get install sqlsrv
    sudo bash -c "echo extension=pdo_sqlsrv.so > /etc/php/$(phpVersion)/cli/conf.d/30-pdo_sqlsrv.ini"
    sudo bash -c "echo extension=sqlsrv.so > /etc/php/$(phpVersion)/cli/conf.d/20-sqlsrv.ini"
  displayName: 'Install SQLSRV & PDO_SQLSRV PHP extensions'
  
- script: |
    cat /etc/php/8.3/cli/conf.d/30-pdo_sqlsrv.ini
  displayName: 'Check pdo_sqlsrv configuration'
  
- script: |
    php -m
  displayName: 'List installed PHP extensions'


- script: |
    php -i
  displayName: 'Print PHP info'

- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'

- script: |
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    php -r "unlink('composer-setup.php');"
  displayName: 'Install Composer'

- script: |
    echo "Checking Composer version..."
    composer --version
    echo "Updating Composer to latest version..."
    composer self-update
    echo "Composer updated to:"
    composer --version
  displayName: 'Update Composer'

- script: composer install --no-interaction --prefer-dist --ignore-platform-reqs
  displayName: 'Install dependencies'

- script: cp .env.example .env
  displayName: 'Setup Environment File'

- script: php artisan key:generate
  displayName: 'Generate Laravel App Key'

- script: |
    php artisan --version # This will ensure that Laravel is set up properly
  displayName: 'Check Laravel version'

# Insert the database migration step here
- script: |

    php artisan migrate --force
  displayName: 'Run database migrations'
  env:
    DB_CONNECTION: sqlsrv
    DB_HOST: $(DB_HOST)
    DB_PORT: $(DB_PORT)
    DB_DATABASE: $(DB_DATABASE)
    DB_USERNAME: $(DB_USERNAME)
    DB_PASSWORD: $(DB_PASSWORD)

- script: |
    php vendor/bin/pest
  displayName: 'Run Pest Tests'

# Additional steps like packaging the app, database migrations, and deployment would go here.




